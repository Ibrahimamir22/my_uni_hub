# Generated by Django 5.1.1 on 2025-03-30 16:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the community', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly name', max_length=120, unique=True)),
                ('description', models.TextField(help_text='Description of the community')),
                ('short_description', models.CharField(blank=True, help_text='Short description for preview cards', max_length=255)),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('social', 'Social'), ('sports', 'Sports'), ('arts', 'Arts & Culture'), ('career', 'Career & Professional'), ('technology', 'Technology'), ('health', 'Health & Wellness'), ('service', 'Community Service'), ('other', 'Other')], default='other', help_text='Category of the community', max_length=20)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=255)),
                ('image', models.ImageField(blank=True, help_text='Community profile image', null=True, upload_to='communities/images/')),
                ('banner', models.ImageField(blank=True, help_text='Community banner image', null=True, upload_to='communities/banners/')),
                ('rules', models.TextField(blank=True, help_text='Community rules and guidelines')),
                ('is_private', models.BooleanField(default=False, help_text='Whether the community is private (invite-only)')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether joining requires admin approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_communities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='approved', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='communities.community')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
                'unique_together': {('user', 'community')},
            },
        ),
        migrations.AddField(
            model_name='community',
            name='members',
            field=models.ManyToManyField(related_name='communities', through='communities.Membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('question', 'Question'), ('event', 'Event'), ('announcement', 'Announcement'), ('resource', 'Resource'), ('other', 'Other')], default='discussion', max_length=20)),
                ('event_date', models.DateTimeField(blank=True, help_text='Date and time for events', null=True)),
                ('event_location', models.CharField(blank=True, help_text='Location for events', max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to='communities/posts/')),
                ('file', models.FileField(blank=True, help_text='Attachments for posts', null=True, upload_to='communities/files/')),
                ('is_pinned', models.BooleanField(default=False, help_text='Pin this post to the top of the community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_posts', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='communities.community')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='upvoted_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='communities.comment')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='upvoted_comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='communities.post')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invitee_email', models.EmailField(help_text='Email of the person being invited', max_length=254)),
                ('message', models.TextField(blank=True, help_text='Optional message to include with the invitation')),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='communities.community')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Invitation',
                'verbose_name_plural': 'Community Invitations',
                'unique_together': {('community', 'invitee_email')},
            },
        ),
    ]
